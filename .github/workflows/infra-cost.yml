name: Project Resource Cost Scan

on:
  pull_request:
    types: [opened, synchronize, closed]
  push:
    branches:
      - main
      - master


env:
  GIT_SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
#   OIDC_ROLE: ${{ secrets.OIDC_ROLE }}

jobs:
  infracost-pull-request-checks:
    name: Infracost Pull Request Checks
    if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize')
    runs-on: ubuntu-latest
    permissions:
        contents: read
        pull-requests: write

    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq


      - name: Send Slack Message - Generating Report
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          PR_TITLE=$(jq -r .pull_request.title < $GITHUB_EVENT_PATH)
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"Infra Change Request: $PR_TITLE\"}" $SLACK_WEBHOOK_URL

      - name: Setup Infracost
        uses: infracost/actions/setup@v3
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

    # Checkout the base branch of the pull request (e.g. main/master).
      - name: Checkout code
        uses: actions/checkout@v3
        with:
            ref: '${{ github.event.pull_request.base.ref }}'

      # Generate Infracost table file as the baseline.
      - name: Generate Infracost cost estimate baseline
        run: |
          infracost breakdown --path=. \
                              --format=json \
                              --out-file=infracost-base.json

      - name: Generate Baseline Master Cost
        run: |
          infracost breakdown --path=. \
                              --format=table \
                              --out-file=infracost-base.txt
                      
      - name: Upload Infracost baseline json as artifact
        uses: actions/upload-artifact@v3
        with:
          name: infracost-base
          path: infracost-base.json

      - name: Upload Infracost baseline table as artifact
        uses: actions/upload-artifact@v3
        with:
          name: infracost-base-table
          path: infracost-base.txt

      # Checkout the current PR branch so we can create a diff.
      - name: Checkout PR branch
        uses: actions/checkout@v4

      - name: Download Infracost baseline json artifact
        uses: actions/download-artifact@v3
        with:
          name: infracost-base

      - name: Download Infracost baseline table artifact
        uses: actions/download-artifact@v3
        with:
          name: infracost-base-table

      - name: Generate Incoming PR Cost
        run: |
          infracost breakdown --path=. \
                              --format=table \
                              --out-file=infracost.txt

      # Generate an Infracost diff and save it to a JSON file.
      - name: Generate Infracost diff
        run: |
          infracost diff --path=. \
                          --format=json \
                          --compare-to=infracost-base.json \
                          --out-file=infracost.json


      # - name: Slack Notification
      #   env:
      #     SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
      #   run: |
      #     pip3 install slack_sdk 
      #     python3 slackmessenger.py


      # Posts a comment to the PR using the 'update' behavior.
      # This creates a single comment and updates it. The "quietest" option.
      - name: Post Infracost comment
        run: |
            infracost comment github --path=infracost.json \
                                     --repo=$GITHUB_REPOSITORY \
                                     --github-token=${{ github.token }} \
                                     --pull-request=${{ github.event.pull_request.number }} \
                                     --behavior=update


      - name: Send notification to Slack
        if: always()  
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          infracost output --path=infracost.json --format=slack-message --out-file=slack_message.json

          # Skip posting to Slack if there's no cost change
          cost_change=$(cat infracost.json | jq -r "(.diffTotalMonthlyCost // 0) | tonumber")
          if [ "$cost_change" = "0" ]; then
            echo "Not posting to Slack since cost change is zero"
            exit 0
          fi

          if [ -z "$SLACK_WEBHOOK" ]; then
            echo "No \$SLACK_WEBHOOK variable set. Add one to your GitHub repository"
            exit 1
          fi

          curl -X POST -H "Content-type: application/json" -d @slack_message.json $SLACK_WEBHOOK


  # Update PR status in Infracost Cloud
  infracost-pull-request-status-update:
    name: Infracost PR Status Update
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
    - name: Infracost PR Status Update
      run: |
        PR_STATUS="MERGED"
        if [[ ${{ github.event.pull_request.merged }} = false ]]; then PR_STATUS="CLOSED"; fi

        echo "Updating status of ${{ github.event.pull_request.html_url }} to $PR_STATUS"
        curl -i \
          --request POST \
          --header "Content-Type: application/json" \
          --header "X-API-Key: $INFRACOST_API_KEY" \
          --data "{ \"query\": \"mutation {updatePullRequestStatus( url: \\\"${{ github.event.pull_request.html_url }}\\\", status: $PR_STATUS )}\" }" \
          "https://dashboard.api.infracost.io/graphql";
      env:
        INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }